trigger:
- '*'

pool:
  vmImage: 'ubuntu-18.04'
  demands:
  - npm

variables:
  buildConfiguration: 'Release'
  wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
  dotnetSdkVersion: '3.1.300'

steps:
- task: UseDotNet@2
  displayName: 'Use .NET Core SDK $(dotnetSdkVersion)'
  inputs:
    version: '$(dotnetSdkVersion)'

- task: Npm@1
  displayName: 'Run npm install'
  inputs:
    verbose: false

- script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
  displayName: 'Compile Sass assets'

- task: gulp@1
  displayName: 'Run gulp tasks'

- script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
  displayName: 'Write build info'
  workingDirectory: $(wwwrootDir)

- task: DotNetCoreCLI@2
  displayName: 'Restore project dependencies'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Build the project - $(buildConfiguration)'
  inputs:
    command: 'build'
    arguments: '--no-restore --configuration $(buildConfiguration)'
    projects: '**/*.csproj'

# マニフェストファイル（dotnet-tools.json）にリストされているツールをインストールする
- task: DotNetCoreCLI@2
  displayName: Install .NET Core tools from local manifest
  inputs:
    command: custom
    custom: tool
    arguments: restore

# 単体テストを実行する＆コードカバレッジをCobertura形式で収集する
- task: DotNetCoreCLI@2
  displayName: Run unit tests - $(buildConfiguration)
  inputs:
    command: test
    arguments: --no-build --configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/
    # --logger trxの代わり。テスト結果trxファイルを一時ディレクトリに生成する
    publishTestResults: true
    projects: '**/*.Tests.csproj'

# Cobertura形式をHTMLに変換する
- task: DotNetCoreCLI@2
  displayName: Create code coverage report
  inputs:
    command: custom
    custom: tool
    arguments: run reportgenerator -reports:$(Build.SourcesDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines

# パイプラインにレポートを表示する
- task: PublishCodeCoverageResults@1
  displayName: Publish code coverage report
  inputs:
    codeCoverageTool: cobertura
    summaryFileLocation: $(Build.SourcesDirectory)/**/coverage.cobertura.xml

- task: DotNetCoreCLI@2
  displayName: 'Publish the project - $(buildConfiguration)'
  inputs:
    command: 'publish'
    projects: '**/*.csproj'
    publishWebProjects: false
    arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
    zipAfterPublish: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  condition: succeeded()
